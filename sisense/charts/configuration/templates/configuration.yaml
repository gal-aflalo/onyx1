apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "configuration.name" . }}
  labels: {{- include "configuration.labels" . | nindent 4 }}
spec:
  replicas: {{ include "configuration.replicas" . }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "configuration.name" . }}
  template:
    metadata:
      labels: {{- include "configuration.labels" . | nindent 8 }}
      {{- if .Values.podAnnotations }}
      annotations: {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "configuration.serviceAccountName" . }}
      {{- if .Values.global.securityContext }}
      securityContext:
        runAsGroup: {{ .Values.global.securityContext.runAsGroup }}
        runAsUser: {{ .Values.global.securityContext.runAsUser }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      {{- if and ( (.Values.global.securityContext.seLinuxOptions).level ) ( not (.Values.global.isOpenshift | default false) ) }}
        seLinuxOptions:
          level: {{ .Values.global.securityContext.seLinuxOptions.level }}
      {{- end }}
      {{- else if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
      topologySpreadConstraints: 
        - labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - {{ include "configuration.name" . }}
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      {{- if .Values.affinity }}
      affinity: {{- toYaml .Values.affinity | nindent 8 }}
      {{- else if .Values.global.clusterMode.enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-{{ .Release.Namespace }}-Application"
                operator: In
                values:
                - "true"
      {{- end }}
      containers:
      - name: {{ template "configuration.name" . }}
        image: "{{ .Values.global.imageRegistry }}/{{ .Chart.Name }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
{{ include "configuration.container.command" . | indent 8 }}
        env:
    {{- if .Values.global.securityContext }}
    {{- if ne (.Values.global.securityContext.runAsUser | toString) "1000" }}
        - name: HOME
          value: "/tmp"
    {{- end }}
    {{- else if .Values.securityContext.runAsUser }}
    {{- if ne (.Values.securityContext.runAsUser| toString) "1000" }} 
        - name: HOME
          value: "/tmp"
    {{- end }}
    {{- end }}
        - name: TRACKING_HOST
          value: "tracking.$(NAMESPACE_NAME)"
        - name: TRACKING_PORT
          value: "31114"
        - name: CM_HOST
          value: "0.0.0.0"
        - name: NEW_RELIC_APP_NAME
          value: "configuration"
        - name: CONF_BACKUP_PATH
          value: "/opt/sisense/storage/configuration"
        - name: 'CONTAINER_MEMORY_LIMIT'
          valueFrom:
            resourceFieldRef:
              containerName: {{ template "configuration.name" . }}
              resource: limits.memory
              divisor: '1Mi'
        - name: 'NODE_OPTIONS'
          value: "$(DEFAULT_NODE_OPTIONS) --max-old-space-size=$(CONTAINER_MEMORY_LIMIT)"
        envFrom:
        {{- if .Values.configMaps }}
        - configMapRef:
        {{- range .Values.configMaps }}
            name: {{ . }}
        {{- end }}
        {{- end }}
        {{- if .Values.secrets }}
        - secretRef:
        {{- range .Values.secrets }}
            name: {{ . }}
        {{- end }}
        {{- end }}
        - configMapRef:
            name: global-configuration
        - configMapRef:
            name: apm-configuration
        ports:
        - containerPort: 3030
        - containerPort: 3031
        - containerPort: 8457
        resources:
          limits: 
            cpu: {{ include "configuration.limits.cpu" . }}
            memory: {{ include "configuration.limits.memory" . }}
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
        lifecycle:
          preStop:
            httpGet:
              path: prestop
              port: 3031
              scheme: HTTP
        livenessProbe:
          httpGet:
           path: /liveness
           port: 3031
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
           path: /readiness
           port: 3031
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - mountPath: /opt/sisense/storage
          name: storage
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      volumes:
{{- if .Values.global.clusterMode.enabled }}
      - name: storage
        persistentVolumeClaim:
          claimName: storage
{{- else }}
      - name: storage
        hostPath:
          path: /opt/sisense/storage
          type: DirectoryOrCreate
{{- end }}
      restartPolicy: Always
      initContainers:
{{- if (.Values.global.mongodb).enabled | default false }}
      - name: init-mongodb
        image: "{{ .Values.global.imageRegistry }}/mongodb:5.0.21-debian-11-r20"
{{- if .Values.global.clusterMode.enabled }}
        command: ['sh', '-c', 'until mongo "{{ .Release.Name }}-mongodb-headless.{{ .Release.Namespace }}:27017" --eval "printjson(db.runCommand({ ping: 1 }))"; do echo waiting for mongodb; sleep 2; done;']
{{- else }}
        command: ['sh', '-c', 'until mongo "{{ .Release.Name }}-mongodb.{{ .Release.Namespace }}:27017" --eval "printjson(db.runCommand({ ping: 1 }))"; do echo waiting for mongodb; sleep 2; done;']
{{- end }}
{{- end }}
      - name: init-zookeeper
        image: "{{ .Values.global.imageRegistry }}/utilsbox:stable"
        command: ['sh', '-c', 'until echo "ruok" | timeout 2 nc -w 2 {{ .Release.Name }}-zookeeper.{{ .Release.Namespace }} 2181 | grep imok; do echo waiting for zookeeper; sleep 2; done;']
      - name: init-rabbitmq
        image: "{{ .Values.global.imageRegistry }}/utilsbox:stable"
        command: ['sh', '-c', 'until curl -i -u guest:guest http://{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}:15672/api/aliveness-test/%2F; do echo waiting for rabbitmq; sleep 2; done;']
      - name: init-filebrowser
        image: "{{ .Values.global.imageRegistry }}/utilsbox:stable"
        command: ['sh', '-c', 'until nc -zv filebrowser.{{ .Release.Namespace }} 8989 -w1; do echo waiting for filebrowser; sleep 2; done;']

---
apiVersion: v1
kind: Service
metadata:
  labels: {{- include "configuration.labels" . | nindent 4 }}
  name: {{ template "configuration.name" . }}
spec:
  type: ClusterIP
  ports:
  - name: tcp
    protocol: TCP
    port: 3030
    targetPort: 3030
  - name: api
    protocol: TCP
    port: 3031
    targetPort: 3031
  - name: internal-http-rpc
    port: 8457
    protocol: TCP
    targetPort: 8457
  selector:
    app: {{ template "configuration.name" . }}
