apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "pivot2-be.name" . }}
  labels: {{- include "pivot2-be.labels" . | nindent 4 }}
spec:
  replicas: {{ include "pivot2-be.replicas" . }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "pivot2-be.name" . }}
  template:
    metadata:
      labels: {{- include "pivot2-be.labels" . | nindent 8 }}
      {{- if .Values.podAnnotations }}
      annotations: {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "pivot2-be.serviceAccountName" . }}
      {{- if .Values.global.securityContext }}
      securityContext:
        runAsGroup: {{ .Values.global.securityContext.runAsGroup }}
        runAsUser: {{ .Values.global.securityContext.runAsUser }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      {{- if and ( (.Values.global.securityContext.seLinuxOptions).level ) ( not (.Values.global.isOpenshift | default false) ) }}
        seLinuxOptions:
          level: {{ .Values.global.securityContext.seLinuxOptions.level }}
      {{- end }}
      {{- else if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
      topologySpreadConstraints:
        - labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - {{ include "pivot2-be.name" . }}
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      {{- if .Values.affinity }}
      affinity: {{- toYaml .Values.affinity | nindent 8 }}
      {{- else if .Values.global.clusterMode.enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-{{ .Release.Name }}-Application"
                operator: In
                values:
                - "true"
      {{- end }}
      containers:
      - env:
    {{- if .Values.global.securityContext }}
    {{- if ne (.Values.global.securityContext.runAsUser | toString) "1000" }}
        - name: HOME
          value: "/tmp"
    {{- end }}
    {{- else if .Values.securityContext.runAsUser }}
    {{- if ne (.Values.securityContext.runAsUser| toString) "1000" }} 
        - name: HOME
          value: "/tmp"
    {{- end }}
    {{- end }}
        - name: WEBSERVER_PORT
          value: "3050"
        - name: PROXY_URL
          value: "http://api-gateway.$(NAMESPACE_NAME):8456"
        - name: QUERY_SERVICE_URL
          value: "query:8082"
        - name: NEW_RELIC_APP_NAME
          value: "pivot2-be"
        - name: CONTAINER_MEMORY_LIMIT
          valueFrom:
            resourceFieldRef:
              containerName: {{ template "pivot2-be.name" . }}
              resource: limits.memory
              divisor: "1Mi"
        - name: 'NODE_OPTIONS'
          value: "$(DEFAULT_NODE_OPTIONS) --max-old-space-size=$(CONTAINER_MEMORY_LIMIT)"
        envFrom:
        {{- if .Values.configMaps }}
        - configMapRef:
        {{- range .Values.configMaps }}
            name: {{ . }}
        {{- end }}
        {{- end }}
        {{- if .Values.secrets }}
        - secretRef:
        {{- range .Values.secrets }}
            name: {{ . }}
        {{- end }}
        {{- end }}
        - configMapRef:
            name: global-configuration
        - configMapRef:
            name: apm-configuration
        image: "{{ .Values.global.imageRegistry }}/{{ .Chart.Name }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        name: {{ template "pivot2-be.name" . }}
        ports:
        - containerPort: 3050
        - containerPort: 8457
        resources:
          limits: 
            cpu: {{ include "pivot2-be.limits.cpu" . }}
            memory: {{ include "pivot2-be.limits.memory" . }}
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
        livenessProbe:
          httpGet:
           path: /liveness
           port: 3050
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
           path: /readiness
           port: 3050
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      restartPolicy: Always
      initContainers:
      - name: init-configuration
        image: "{{ .Values.global.imageRegistry }}/utilsbox:stable"
        command: ['sh', '-c', 'until nc -zv configuration.{{ .Release.Namespace }} 3030 -w1; do echo waiting for configuration; sleep 2; done;']

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "pivot2-be.name" . }}
  labels: {{- include "pivot2-be.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - name: tcp
      protocol: TCP
      port: 3050
      targetPort: 3050
  selector:
    app: {{ template "pivot2-be.name" . }}
