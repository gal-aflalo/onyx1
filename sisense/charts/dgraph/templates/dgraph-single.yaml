{{- if not .Values.global.clusterMode.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "dgraph.fullname" . }}
  labels:
    {{- include "dgraph.labels" . | nindent 4 }}
      {{- if not ( (.Values.global.onyx).enabled | default false ) }}
      nlq: "true"
      {{- end }}
    dgraph: "dgraph"    
spec:
  serviceName: "dgraph"
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "dgraph.selectorLabels" . | nindent 6 }}
      {{- if not ( (.Values.global.onyx).enabled | default false ) }}
      nlq: "true"
      {{- end }}      
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "dgraph.selectorLabels" . | nindent 8 }}
        {{- if not ( (.Values.global.onyx).enabled | default false ) }}
        nlq: "true"
        {{- end }}
        dgraph: "dgraph"        
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.global.securityContext }}
      securityContext:
        runAsGroup: {{ .Values.global.securityContext.runAsGroup }}
        runAsUser: {{ .Values.global.securityContext.runAsUser }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      {{- if and ( (.Values.global.securityContext.seLinuxOptions).level ) ( not (.Values.global.isOpenshift | default false) ) }}
        seLinuxOptions:
          level: {{ .Values.global.securityContext.seLinuxOptions.level }}
      {{- end }}
      {{- else if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
      {{- if .Values.global.securityContext }}
      {{- if eq (.Values.global.securityContext.runAsUser | toString) "1000" }}
      initContainers:
        - name: init-chown-data
          image: "{{ .Values.global.imageRegistry }}/utilsbox:stable"
          imagePullPolicy: {{ .Values.initChownData.image.pullPolicy }}
          securityContext:
            runAsUser: 0
          command: ["chown", "-R", "{{ .Values.global.securityContext.runAsUser }}:{{ .Values.global.securityContext.runAsGroup }}", "/dgraph"]
          resources:
      {{ toYaml .Values.initChownData.resources | indent 12 }}
          volumeMounts:
            - name: datadir
              mountPath: /dgraph
      {{- end }}
      {{- else if eq (.Values.securityContext.runAsUser | toString) "1000" }}
      initContainers:
        - name: init-chown-data
          image: "{{ .Values.global.imageRegistry }}/utilsbox:stable"
          imagePullPolicy: {{ .Values.initChownData.image.pullPolicy }}
          securityContext:
            runAsUser: 0
          command: ["chown", "-R", "{{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsGroup }}", "/dgraph"]
          resources:
      {{ toYaml .Values.initChownData.resources | indent 12 }}
          volumeMounts:
            - name: datadir
              mountPath: /dgraph
      {{- end }}
      containers:
      - name: zero
        image: "{{ .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 5080
          name: grpc-zero
        - containerPort: 6080
          name: http-zero
        volumeMounts:
        - name: datadir
          mountPath: /dgraph
        command:
          - bash
          - "-c"
          - |
            set -ex
            echo "v1"
            dgraph zero --my=$(hostname -f):5080
        resources:
          limits: 
            cpu: {{ include "dgraph.zero.limits.cpu" . }}
            memory: {{ include "dgraph.zero.limits.memory" . }}
          requests:
            cpu: {{ .Values.zero.resources.requests.cpu }}
            memory: {{ .Values.zero.resources.requests.memory }}
      - name: alpha
        image: "{{ .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
    {{- if .Values.global.securityContext }}
    {{- if ne (.Values.global.securityContext.runAsUser | toString) "1000" }}
        - name: HOME
          value: "/tmp"
    {{- end }}
    {{- else if .Values.securityContext.runAsUser }}
    {{- if ne (.Values.securityContext.runAsUser| toString) "1000" }} 
        - name: HOME
          value: "/tmp"
    {{- end }}
    {{- end }}
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8080
          name: http-alpha
        - containerPort: 9080
          name: grpc-alpha
        volumeMounts:
        - name: datadir
          mountPath: /dgraph
        command:
        - bash
        - "-c"
        - |
           set -ex
           echo "v1"
           dgraph alpha --my=$(hostname -f):7080 --zero {{ .Release.Name }}-dgraph-0.dgraph.${POD_NAMESPACE}.svc.cluster.local:5080 --security whitelist=0.0.0.0/0
        resources:
          limits: 
            cpu: {{ include "dgraph.alpha.limits.cpu" . }}
            memory: {{ include "dgraph.alpha.limits.memory" . }}
          requests:
            cpu: {{ .Values.alpha.resources.requests.cpu }}
            memory: {{ .Values.alpha.resources.requests.memory }}        
      terminationGracePeriodSeconds: 60
      volumes:
        {{- if and .Values.persistence.enabled .Values.persistence.existingClaim }}
      - name: datadir
        persistentVolumeClaim:
          claimName: {{ printf "%s" (tpl .Values.persistence.existingClaim .) }}
        {{- else if not .Values.persistence.enabled }}
      - name: datadir
        emptyDir: {}
        {{- end }}
  {{- if and .Values.persistence.enabled (not (and .Values.persistence.existingClaim ) )}}
  volumeClaimTemplates:
  {{- if not .Values.persistence.existingClaim }}
    - metadata:
        name: datadir
        labels:
        {{- range $key, $value := .Values.persistence.labels }}
          {{ $key }}: {{ $value }}
        {{- end }}
        annotations:
        {{- range $key, $value := .Values.persistence.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{- include "dgraph.storageClass" . | nindent 8 }}
    {{- end }}
  {{- end }}

---

# This is the service that should be used by the clients of Dgraph to talk to the cluster.
apiVersion: v1
kind: Service
metadata:
  name: dgraph-public
  labels: {{- include "dgraph.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
  - port: 5080
    targetPort: 5080
    name: zero-grpc
  - port: 6080
    targetPort: 6080
    name: zero-http
  - port: 8080
    targetPort: 8080
    name: alpha-http
  - port: 9080
    targetPort: 9080
    name: alpha-grpc
  selector:
    {{- include "dgraph.selectorLabels" . | nindent 4 }}
{{- end }}
