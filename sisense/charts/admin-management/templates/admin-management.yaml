apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "admin-management.name" . }}
  labels:
    app: {{ template "admin-management.name" . }}
spec:
  replicas: {{ include "admin-management.replicas" . }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "admin-management.name" . }}
  template:
    metadata:
      labels: {{- include "admin-management.labels" . | nindent 8 }}
      {{- if .Values.podAnnotations }}
      annotations: {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "admin-management.serviceAccountName" . }}
      {{- if .Values.global.securityContext }}
      securityContext:
        {{- toYaml .Values.global.securityContext | nindent 8 }}
      {{- else if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
      topologySpreadConstraints:
        - labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - {{ include "admin-management.name" . }}
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      {{- if .Values.affinity }}
      affinity: {{- toYaml .Values.affinity | nindent 8 }}
      {{- else if .Values.global.clusterMode.enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node-{{ .Release.Namespace }}-Application"
                operator: In
                values:
                - "true"
      {{- end }}
      containers:
      - name: admin-management-container
        image: "{{ .Values.global.imageRegistry }}/{{ .Values.image.name}}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        resources:
{{ toYaml .Values.resources | indent 12 }}
        ports:
        - containerPort: {{.Values.port}}
        env:
        {{- if .Values.configMaps }}
        - configMapRef:
        {{- range .Values.configMaps }}
            name: {{ . }}
        {{- end }}
        {{- end }}
        {{- if .Values.secrets }}
        - secretRef:
        {{- range .Values.secrets }}
            name: {{ . }}
        {{- end }}
        {{- end }}
        {{- if .Values.global.securityContext }}
        {{- if ne (.Values.global.securityContext.runAsUser | toString) "1000" }}
        - name: HOME
          value: "/tmp"
        {{- end }}
        {{- else if .Values.securityContext.runAsUser }}
        {{- if ne (.Values.securityContext.runAsUser| toString) "1000" }} 
        - name: HOME
          value: "/tmp"
        {{- end }}
        {{- end }}
        - name: ONYX_APP
          value: {{ template "admin-management.name" . }}
        envFrom:
        - configMapRef:
            name: global-configuration
        ports:
        - containerPort: {{.Values.port}}
        - containerPort: 8457
        lifecycle:
          preStop:
            httpGet:
              path: prestop
              port: {{.Values.port}}
              scheme: HTTP
        livenessProbe:
          httpGet:
            path: /liveness
            port: {{.Values.port}}
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 20
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readiness
            port: 16002
          initialDelaySeconds: 10
          timeoutSeconds: 5
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - mountPath: /opt/sisense/storage
          name: storage
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      volumes:
{{- if .Values.global.clusterMode.enabled }}
      - name: storage
        persistentVolumeClaim:
          claimName: storage
{{- else }}
      - name: storage
        hostPath:
          path: /opt/sisense/storage
          type: DirectoryOrCreate
{{- end }}
      restartPolicy: Always
        
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "admin-management.name" . }}
  labels:
    app: {{ template "admin-management.name" . }}
spec:
  selector:
    app: {{ template "admin-management.name" . }}
  ports:
  - protocol: TCP
    port: {{ .Values.port }}
    targetPort: {{ .Values.port }}
  type: ClusterIP
